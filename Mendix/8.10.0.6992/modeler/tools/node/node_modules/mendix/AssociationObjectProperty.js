import{f as available,D as getOrCrashL,C as readUntracked,u as unavailable}from"./2252f97c.js";import"react";import{r as toFriendlyId,e as ensure}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import{M as MxObject}from"./e4677d80.js";import"./449717b5.js";import"./dc685e13.js";import{c as getSubscribedObjectState$,g as getByPath$}from"./194b06f4.js";import{f as fromObjectProperty$}from"./006f2130.js";const AssociationObjectProperty=asProperty(({path:path,queryId:queryId,scope:scope},store,widgetId)=>{const rootObject$=getSubscribedObjectState$(store,scope),friendlyId=toFriendlyId(widgetId);return!path||mx.isOffline()?fromObjectProperty$(scope,store,widgetId,path?getByPath$(rootObject$,path):rootObject$,p=>(logUsingObject(p),available(p))):fromObjectProperty$(scope,store,widgetId,getByPath$(rootObject$,path,!0),parameters=>{if(parameters instanceof MxObject)return logUsingObject(parameters),available(parameters);const contextGuid=getOrCrashL(readUntracked(rootObject$)).getGuid();return function(contextGuid){mx.logger.debug(`Fetching object with context object '${contextGuid}' and queryId '${queryId}' for widget ${friendlyId}`)}(contextGuid),mx.onlineData.retrieveByPath(contextGuid,ensure(queryId)).then(({mxobjects:mxobjects,extra:extra})=>{const mxObject=mxobjects.length?mxobjects[0]:void 0;return function(mxObject,extra){const guid=null==mxObject?void 0:mxObject.getGuid();mx.logger.debug(guid?`Received object '${guid}' and ${extra.length} objects over schema for widget ${friendlyId}`:"Received no object for widget "+friendlyId,"extra ids:",extra.map(o=>o.getGuid()))}(mxObject,extra),mxObject?available(mxObject):unavailable()})});function logUsingObject(mxObject){mx.logger.debug(`Using object '${mxObject.getGuid()}' for widget ${friendlyId}`)}});export{AssociationObjectProperty};
