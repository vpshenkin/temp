import{N as asDynamicValue$,k as fromComputation$,K as fromRequest$,m as loading,O as withSideEffect$,w as mapL,v as fromConstant$,u as unavailable,C as readUntracked}from"./2252f97c.js";import{t as toObjectItem}from"./dc685e13.js";import{b as getSubscribedObject$}from"./194b06f4.js";function fromObjectProperty$(scope,store,widgetId,parameters$,fetch){const shouldLoad$=getShouldLoad$(scope,store,widgetId),fetchResult$=fromRequest$("Load data of data source of "+widgetId,()=>{if(!shouldLoad$.dependOn())return loading();const parameters=parameters$.dependOn();return"available"!==parameters.status?parameters:fetch(parameters.value)}),object$=withObjectSharing$(getSubscribedObject$(widgetId,fetchResult$),store,widgetId);return asDynamicValue$(fromComputation$("Returned data of data source of "+widgetId,()=>mapL(object$.dependOn(),toObjectItem)))}function getShouldLoad$(scope,store,widgetId){if(scope){const[firstLoadDone$]=store.useSlot(scope,"firstLoadDone");return fromComputation$("Load breaker of data source of "+widgetId,()=>Boolean(firstLoadDone$.dependOn()))}return fromConstant$(!0)}function withObjectSharing$(value$,store,widgetId){const[firstLoadDone$,setFirstLoadDone]=store.useSlot(widgetId,"firstLoadDone"),[object$,setObject]=store.useSlot(widgetId,"object");return withSideEffect$("Share object of "+widgetId,value$,value=>{if(readUntracked(firstLoadDone$)||setFirstLoadDone("loading"!==value.status),"loading"===value.status){const oldState=readUntracked(object$);void 0!==oldState&&"unavailable"!==oldState.status||setObject(loading())}else setObject(value)},()=>{setFirstLoadDone(!1),setObject(unavailable())})}export{fromObjectProperty$ as f,getShouldLoad$ as g,withObjectSharing$ as w};
