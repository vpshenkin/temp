const compute=Symbol("compute");function isComputation(value){return"object"==typeof value&&null!=value&&null!=value[compute]}function toEvaluation(computation,store,widgetId,propertyPath){return computation[compute](store,widgetId,propertyPath)}const result=Symbol("result");function isComputationResult(value){return"object"==typeof value&&null!=value&&null!=value[result]}function toValue(computationResult){return computationResult[result]}function asResult(value){return{[result]:value}}function asMobxProperty(func){return c=>({[compute]:(s,w)=>[func(c,s,w),void 0]})}function asProperty(func){return c=>({[compute]:(s,w,p)=>{const funcResult=func(c,s,w,p),[value$,afterUpdate]=Array.isArray(funcResult)?funcResult:[funcResult,void 0];return[()=>value$.dependOn(),afterUpdate]}})}export{isComputation as a,toEvaluation as b,asProperty as c,asResult as d,asMobxProperty as e,isComputationResult as i,toValue as t};
