import{v as fromConstant$,C as readUntracked,u as unavailable,f as available}from"./2252f97c.js";import"react";import{e as ensure,j as crash,r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import{p as pageScope}from"./0b2c9cb2.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import"./11de92d0.js";import{a as DescribedError}from"./e4677d80.js";import{n as nanoflowEngine}from"./c40e70cb.js";import"./d1a3b52a.js";import"./275ae0e7.js";import"./449717b5.js";import"./dc685e13.js";import"./194b06f4.js";import"./006f2130.js";import{o as objectListTrigger,b as getImmediatePageSetters}from"./dd6506a6.js";import{g as getClientPagedList$}from"./e3382b49.js";import{a as getNanoflowArguments$}from"./5f469b1e.js";const NanoflowObjectListProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles)){mx.onError(new DescribedError("Unable to execute action because you do not have sufficient permissions."));const fakeTrigger=objectListTrigger(config,store,widgetId,fromConstant$(void 0)),pageSetters=getImmediatePageSetters(store,widgetId);return fromConstant$(Object.assign(Object.assign({status:"unavailable"},readUntracked(fakeTrigger.page$)),pageSetters))}const[currentForm$]=store.useSlot(pageScope,"form");return getClientPagedList$(config,store,widgetId,getNanoflowArguments$(config.argMap,store,"data source of "+widgetId),(async function(args){if("available"!==args.status)return args;const[currentForm]=ensure(readUntracked(currentForm$));let normalizedResult;!function(args){mx.logger.debug(`Fetching data using nanoflow '${config.source.nanoflow}' for widget ${toFriendlyId(widgetId)}`,"parameter mapping:",args)}(args.value);try{const result=await nanoflowEngine.execute(config.source.nanoflow,args.value,currentForm);normalizedResult=void 0===result?[]:Array.isArray(result)?result:crash()}catch(e){return function(widgetId,e){mx.onError(new Error(`An error occurred while executing nanoflow data source for widget ${toFriendlyId(widgetId)}: ${e.message}`))}(widgetId,e),unavailable()}return function(objects){mx.logger.debug(`Received ${objects.length} objects for widget ${toFriendlyId(widgetId)}`,"object ids:",objects.map(mxobj=>mxobj.getGuid()))}(normalizedResult),available(normalizedResult)}))});export{NanoflowObjectListProperty};
