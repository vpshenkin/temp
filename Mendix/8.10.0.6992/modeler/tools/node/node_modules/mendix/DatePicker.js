import{Platform,TouchableNativeFeedback,TouchableOpacity,Text,StyleSheet,Modal,TouchableWithoutFeedback,View,Button}from"react-native";import{createElement,Children,Component,Fragment}from"react";import{t as translate}from"./11de92d0.js";import{_ as __rest}from"./d46da013.js";import{e as extract}from"./b98b1f86.js";import{I as InputContainer}from"./5fcc0a4a.js";import DateTimePicker from"@react-native-community/datetimepicker";const DatePickerValue=props=>{const editable=!props.inputValue.readOnly,Touchable="android"===Platform.OS?TouchableNativeFeedback:TouchableOpacity,displayValue=getDisplayValue(props.inputValue,props.placeholder),showPlaceholder=!props.inputValue.value,textStyles=[props.textStyle,editable?void 0:props.textDisabledStyle,showPlaceholder?props.placeholderStyle:void 0,showPlaceholder&&!editable?props.placeholderDisabledStyle:void 0];return createElement(_a=>{var{children:children}=_a,feedbackProps=__rest(_a,["children"]);return editable?createElement(Touchable,Object.assign({onPress:()=>props.onPress()},feedbackProps),children):Children.only(children)},{accessible:!0,accessibilityLabel:displayValue,testID:"android"===Platform.OS?props.name+"$value":void 0},createElement(Text,{style:textStyles,testID:"ios"===Platform.OS?props.name+"$value":void 0},displayValue))},getDisplayValue=(inputValue,placeholder)=>{var _a;return inputValue.value?inputValue.displayValue:null!==(_a=placeholder.value)&&void 0!==_a?_a:" "};class DatePickerAndroid extends Component{constructor(){super(...arguments),this.state={},this.onDateChangeHandler=this.onDateChange.bind(this),this.onTimeChangeHandler=this.onTimeChange.bind(this),this.onDatePressHandler=this.onDatePress.bind(this)}onDateChange(event,date){if("set"===event.type){if("datetime"===this.props.mode)return void this.setState({currentlyVisiblePicker:"time",intermediateValue:date});this.closePicker(()=>this.setValue(date))}else this.closePicker()}onTimeChange(event,date){"set"===event.type?this.closePicker(()=>this.setValue(date)):this.closePicker()}onDatePress(){this.props.inputValue.readOnly||(this.dispatchAction(this.props.onEnter),this.setState({currentlyVisiblePicker:"time"===this.props.mode?"time":"date"}))}setValue(date){"available"!==this.props.inputValue.status||this.props.inputValue.readOnly||this.props.inputValue.setValue(date)}closePicker(callback){this.setState({currentlyVisiblePicker:void 0,intermediateValue:void 0},()=>{callback&&callback(),this.dispatchAction(this.props.onLeave)})}render(){const style=processStyles(this.props.style);return createElement(Fragment,null,createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.inputValue.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},createElement(DatePickerValue,{name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,textStyle:style.value,textDisabledStyle:style.valueDisabled,placeholderStyle:style.placeholder,placeholderDisabledStyle:style.placeholderDisabled})),this.renderPicker())}get value(){return"available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?new Date:this.props.inputValue.value}renderPicker(){switch(this.state.currentlyVisiblePicker){case"date":return this.renderDatePicker();case"time":return this.renderTimePicker();default:return null}}renderDatePicker(){return createElement(DateTimePicker,{testID:this.props.name+"$picker",value:this.value,onChange:this.onDateChangeHandler,mode:"date"})}renderTimePicker(){var _a;return createElement(DateTimePicker,{testID:this.props.name+"$picker",value:null!==(_a=this.state.intermediateValue)&&void 0!==_a?_a:this.value,onChange:this.onTimeChangeHandler,mode:"time"})}dispatchAction(action){"available"===this.props.inputValue.status&&action&&action.execute()}}class DatePickerIOS extends Component{constructor(){super(...arguments),this.state={visible:!1},this.onChangeHandler=this.onChange.bind(this),this.onDatePressHandler=this.onDatePress.bind(this),this.onToggleHandler=this.toggleVisibility.bind(this,!0)}onChange(_event,date){this.setValue(date)}onDatePress(){this.props.inputValue.readOnly||("available"===this.props.inputValue.status&&void 0===this.props.inputValue.value?(this.dispatchAction(this.props.onEnter),this.setValue(new Date),this.toggleVisibility(!1)):this.toggleVisibility())}toggleVisibility(dispatchEvents=!0){this.setState(state=>({visible:!state.visible}),()=>dispatchEvents&&this.dispatchAction(this.state.visible?this.props.onEnter:this.props.onLeave))}setValue(date){"available"!==this.props.inputValue.status||this.props.inputValue.readOnly||this.props.inputValue.setValue(date)}render(){const style=processStyles(this.props.style);return createElement(Fragment,null,createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.inputValue.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},createElement(DatePickerValue,{name:this.props.name,inputValue:this.props.inputValue,placeholder:this.props.placeholder,onPress:this.onDatePressHandler,textStyle:style.value,textDisabledStyle:style.valueDisabled,placeholderStyle:style.placeholder,placeholderDisabledStyle:style.placeholderDisabled})),this.renderDatePicker(style))}renderDatePicker(styles){if(!this.state.visible)return null;const datePicker=createElement(DateTimePicker,{testID:this.props.name+"$picker",value:this.props.inputValue.value,onChange:this.onChangeHandler,mode:this.props.mode});return this.props.inline?datePicker:this.renderModal(datePicker,styles)}renderModal(child,styles){const{pickerBackdropIOS:pickerBackdropIOS,pickerIOS:pickerIOS,pickerTopIOS:pickerTopIOS}=styles;return createElement(Modal,{transparent:!0,onRequestClose:()=>{}},createElement(TouchableWithoutFeedback,{accessible:!1,onPress:this.onToggleHandler},createElement(View,{style:[defaultStyles.backdropWrapper,pickerBackdropIOS]},createElement(View,{style:[defaultStyles.container,pickerIOS]},createElement(View,{style:[defaultStyles.topWrapper,pickerTopIOS]},createElement(Button,{testID:this.props.name+"$closeButton",title:translate("mxui.widget.native","ModalDialog.close"),onPress:this.onToggleHandler})),child))))}dispatchAction(action){"available"===this.props.inputValue.status&&action&&action.execute()}}const defaultStyles=StyleSheet.create({backdropWrapper:{backgroundColor:"rgba(0, 0, 0, 0.3)",flex:1,flexDirection:"row",alignItems:"flex-end"},container:{backgroundColor:"#FFFFFF",flex:1},topWrapper:{alignItems:"flex-end"}}),DatePicker=props=>createElement("android"===Platform.OS?DatePickerAndroid:DatePickerIOS,props);function processStyles([style]){const{label:labelStyle}=style,other=__rest(style,["label"]),[labelProps,label]=extract(labelStyle,["numberOfLines"]);return Object.assign({label:label,labelProps:labelProps},other)}export{DatePicker,processStyles};
