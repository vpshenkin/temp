import{v as fromConstant$,f as available,k as fromComputation$,x as flatMapL,u as unavailable,h as getOrElseL,L as asReloadable$}from"./2252f97c.js";import"react";import{r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import"./11de92d0.js";import"./e4677d80.js";import"./d1a3b52a.js";import{A as Access}from"./449717b5.js";import"./dc685e13.js";import{l as listItemProperty}from"./7fbb204c.js";import"./09e8fbb9.js";import{c as createFormatter}from"./6e590920.js";import{g as getByPath$,a as getAttribute$}from"./194b06f4.js";const ListAttributeProperty=asProperty((config,_store,widgetId,propertyPath)=>{var _a;const defaultFormatter=createFormatter(config.entity,config.attribute,null!==(_a=config.formatting)&&void 0!==_a?_a:{}),description=`List attribute ${widgetId}/${propertyPath}`;return listItemProperty((function(object){const rootObject$=fromConstant$(available(object)),mxObject$=config.path?getByPath$(rootObject$,config.path):rootObject$,attribute$=getAttribute$(mxObject$,config.attribute),value$=fromComputation$(`${description} for object ${object.getGuid()}`,()=>{const valueL=flatMapL(attribute$.dependOn(),attribute=>attribute.access===Access.None?(function(config,widgetId){mx.logger.debug(`No access to attribute "${config.attribute}" of entity "${config.entity}" in widget ${toFriendlyId(widgetId)}.`)}(config,widgetId),unavailable()):available(attribute.value)),value=getOrElseL(valueL,void 0),displayValue=defaultFormatter.format(value);return{status:valueL.status,value:value,displayValue:displayValue,formatter:defaultFormatter,readOnly:!0,setFormatter:()=>unsupportedOperationError("setFormatter",widgetId),setValue:()=>noWriteAccessError(config,widgetId),setTextValue:()=>noWriteAccessError(config,widgetId),validation:void 0,setValidator:()=>unsupportedOperationError("setValidator",widgetId)}});return asReloadable$(value$)}),description)});function noWriteAccessError(config,widgetId){mx.logger.debug(`Widget ${toFriendlyId(widgetId)} is attempting to change the value of attribute "${config.attribute}" of entity "${config.entity}" which is not writable.`)}function unsupportedOperationError(functionName,widgetId){throw new Error(`Widget ${toFriendlyId(widgetId)} is attempting to call "${functionName}" which is not supported.`)}export{ListAttributeProperty};
