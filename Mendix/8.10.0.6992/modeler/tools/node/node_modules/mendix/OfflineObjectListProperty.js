import{v as fromConstant$,f as available}from"./2252f97c.js";import"react";import{e as ensure,r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import"./e4677d80.js";import"./275ae0e7.js";import"./449717b5.js";import"./dc685e13.js";import{c as getSubscribedObjectState$}from"./194b06f4.js";import"./006f2130.js";import"./dd6506a6.js";import{g as getServerPagedList$}from"./5f91b5c0.js";const OfflineObjectListProperty=asProperty((config,store,widgetId)=>getServerPagedList$(config,store,widgetId,void 0!==config.reference?getSubscribedObjectState$(store,ensure(config.scope)):fromConstant$(available(void 0)),(function(parameter,{offset:offset,limit:limit}){const filter=Object.assign(Object.assign({offset:offset},limit!==Number.POSITIVE_INFINITY?{limit:limit}:{}),config.sort?{sort:config.sort}:{}),constraints=void 0!==parameter?[...config.constraints,{attribute:config.reference,operator:"equals",value:parameter.getGuid()}]:config.constraints;return new Promise((resolve,reject)=>{mx.logger.debug(`Fetching data for entity '${config.entity}' for widget ${toFriendlyId(widgetId)}`),mx.data.getSlice(config.entity,constraints,filter,!0,(mxobjs,count)=>{var objects;resolve({mxobjs:mxobjs,count:count}),objects=mxobjs,mx.logger.debug(`Received ${objects.length} objects for widget ${toFriendlyId(widgetId)}`,"object ids:",objects.map(mxobj=>mxobj.getGuid()))},reject)})})));export{OfflineObjectListProperty};
