import{Platform,TextInput}from"react-native";import{Component,createElement}from"react";import"./d46da013.js";import{F as FormatterType}from"./09e8fbb9.js";import{e as extract}from"./b98b1f86.js";import{I as InputContainer}from"./5fcc0a4a.js";const platformKeyboardType={default:{android:"default",iOS:"default"},"number-pad":{android:"numeric",iOS:"number-pad"},"decimal-pad":{android:"numeric",iOS:"decimal-pad"},"phone-pad":{android:"phone-pad",iOS:"phone-pad"},url:{android:"default",iOS:"url"},"email-address":{android:"email-address",iOS:"email-address"}},isAndroid="android"===Platform.OS;class TextBox extends Component{constructor(){super(...arguments),this.state={displayValue:this.props.inputValue.displayValue},this.onChangeTextHandler=this.onChangeText.bind(this),this.onFocusHandler=this.onFocus.bind(this),this.onBlurHandler=this.onBlur.bind(this),this.onSubmitEditingHandler=this.onSubmitEditing.bind(this)}componentDidUpdate(prevProps){prevProps.inputValue.displayValue!==this.props.inputValue.displayValue&&this.setState({displayValue:this.props.inputValue.displayValue})}render(){const style=function([style]){const{container:container,validationMessage:validationMessage}=style,inputPropsKeys=["autoCapitalize","placeholderTextColor","selectionColor","underlineColorAndroid"],[inputProps,input]=extract(style.input,inputPropsKeys),[inputDisabledProps,inputDisabled]=extract(style.inputDisabled,inputPropsKeys),[inputErrorProps,inputError]=extract(style.inputError,inputPropsKeys),[labelProps,label]=extract(style.label,["numberOfLines"]);return{container:container,inputProps:inputProps,input:input,inputDisabledProps:inputDisabledProps,inputDisabled:inputDisabled,inputErrorProps:inputErrorProps,inputError:inputError,labelProps:labelProps,label:label,validationMessage:validationMessage}}(this.props.style),validation=this.props.inputValue.validation,editable=!this.props.inputValue.readOnly,keyboardType=TextBox.getPlatformKeyboardType(this.props.keyboardType),inputStyle=editable?validation?[style.input,style.inputError]:style.input:[style.input,style.inputDisabled],inputStyleProps=editable?validation?style.inputErrorProps:style.inputProps:style.inputDisabledProps,autocompleteProps=this.props.autocomplete?{}:{autoCorrect:!1,autoCompleteType:"off",textContentType:"none"};return createElement(InputContainer,{name:this.props.name,label:this.props.label,validation:this.props.inputValue.validation,formOrientation:this.props.formOrientation,labelWidth:this.props.labelWidth,containerStyle:style.container,labelStyle:style.label,labelStyleProps:style.labelProps,validationMessageStyle:style.validationMessage},createElement(TextInput,Object.assign({maxLength:this.props.maxLength,testID:this.props.name,style:inputStyle,editable:editable,onChangeText:this.onChangeTextHandler,onFocus:this.onFocusHandler,onBlur:this.onBlurHandler,onSubmitEditing:this.onSubmitEditingHandler,placeholder:this.props.placeholder.value,value:this.state.displayValue,keyboardType:isAndroid&&!this.props.autocomplete&&"default"===keyboardType?"visible-password":keyboardType,clearButtonMode:"while-editing",secureTextEntry:this.props.isPassword},inputStyleProps,autocompleteProps)))}onChangeText(text){this.setState({displayValue:text})}onFocus(){const formatter=this.props.inputValue.formatter;formatter.type===FormatterType.Number&&this.props.inputValue.setFormatter(formatter.withConfig(Object.assign(Object.assign({},formatter.config),{groupDigits:!1}))),this.dispatchAction(this.props.onEnter)}onBlur(e){this.isNumberTextBox()&&this.props.inputValue.setFormatter(void 0),this.submitValue(),"blur"===e.type&&this.dispatchAction(this.props.onLeave)}onSubmitEditing(){this.submitValue(),this.dispatchAction(this.props.onEnterKeyPress)}submitValue(){this.state.displayValue!==this.props.inputValue.displayValue&&(this.props.inputValue.setTextValue(this.state.displayValue),this.state.displayValue!==this.props.inputValue.displayValue&&this.setState({displayValue:this.props.inputValue.displayValue}))}dispatchAction(action){"available"===this.props.inputValue.status&&action&&action.execute()}isNumberTextBox(){return this.props.inputValue.formatter.type===FormatterType.Number}static getPlatformKeyboardType(keyboardType){const platformKeyboard=platformKeyboardType[keyboardType];return isAndroid?platformKeyboard.android:platformKeyboard.iOS}}export{TextBox};
