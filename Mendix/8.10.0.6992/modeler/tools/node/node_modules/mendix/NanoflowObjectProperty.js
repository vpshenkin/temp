import{v as fromConstant$,C as readUntracked,f as available,u as unavailable}from"./2252f97c.js";import"react";import{e as ensure,r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import{p as pageScope}from"./0b2c9cb2.js";import"./3cf8690e.js";import{a as dynUnavailable}from"./0e7164f2.js";import"big.js";import"./11de92d0.js";import{a as DescribedError,M as MxObject}from"./e4677d80.js";import{n as nanoflowEngine}from"./c40e70cb.js";import"./d1a3b52a.js";import"./275ae0e7.js";import"./449717b5.js";import"./dc685e13.js";import"./194b06f4.js";import{f as fromObjectProperty$}from"./006f2130.js";import{a as getNanoflowArguments$}from"./5f469b1e.js";const NanoflowObjectProperty=asProperty((config,store,widgetId)=>{const allowedRoles=config.source.allowedRoles;if(void 0!==allowedRoles&&!mx.session.hasSomeRole(allowedRoles))return mx.onError(new DescribedError("Unable to execute action because you do not have sufficient permissions.")),fromConstant$(dynUnavailable());const[currentForm$]=store.useSlot(pageScope,"form");return fromObjectProperty$(config.scope,store,widgetId,getNanoflowArguments$(config.argMap,store,"data source of "+widgetId),async args=>{!function(args){mx.logger.debug(`Fetching object using nanoflow '${config.source.nanoflow}' for widget ${toFriendlyId(widgetId)}`,"parameter mapping:",args)}(args);try{const result=await nanoflowEngine.execute(config.source.nanoflow,args,ensure(readUntracked(currentForm$))[0]),mxObject=result instanceof MxObject?result:void 0;return function(mxObject){mx.logger.debug(mxObject?`Received object '${mxObject.getGuid()}' for widget ${toFriendlyId(widgetId)}`:"Received no object for widget "+toFriendlyId(widgetId))}(mxObject),mxObject?available(mxObject):unavailable()}catch(e){return function(widgetId,e){mx.onError(new Error(`An error occurred while executing nanoflow data source for widget ${toFriendlyId(widgetId)}: ${e.message}`))}(widgetId,e),unavailable()}})});export{NanoflowObjectProperty};
