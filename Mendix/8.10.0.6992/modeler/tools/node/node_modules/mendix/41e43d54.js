import{A as AssertionError,e as ensure,j as crash}from"./e81b9882.js";import{t as translate}from"./11de92d0.js";import{a as DescribedError}from"./e4677d80.js";import{m as methodToPromise,n as nanoflowEngine}from"./c40e70cb.js";import{V as ValidationError,t as toMicroflowParameters,a as toNanoflowArguments,D as DanglingError}from"./dbc0cbf9.js";async function openPage(modelerConfig,clientConfig,parameter){let formParameterObjects;if(parameter)if("object"in parameter)formParameterObjects=[parameter.object];else{if(!("objects"in parameter))throw new AssertionError;formParameterObjects=parameter.objects}else formParameterObjects=void 0;if(clientConfig.abortOnClientValidations&&await clientConfig.currentForm.triggerValidation(),clientConfig.abortOnServerValidations&&await methodToPromise(mx.data,"validate",clientConfig.currentForm.getSubmitObjects()),formParameterObjects){const formsOpened=await Promise.all(formParameterObjects.map(showPage));return"objects"in parameter?formsOpened:formsOpened[0]}return showPage();async function showPage(object){const settings=object&&modelerConfig.specializations&&modelerConfig.specializations[object.getEntity()]||modelerConfig;return mx.ui.openForm2(settings.name,null==object?void 0:object.getGuid(),settings.title,clientConfig.currentForm,Object.assign(Object.assign({},settings),{formParams:clientConfig.formParams}))}}async function openLink(config,parameter){const url="addressAttribute"in config?await methodToPromise(ensure(parameter),"fetch",config.addressAttribute):config.address,urlWithSchema=function(schema,url){switch(schema){case"email":return"mailto:"+escape(url);case"call":return"tel:"+escape(url);case"text":return"sms:"+escape(url);default:return url}}(config.schema,url);window.open(urlWithSchema,"web"===config.schema?"_blank":"_self")}async function synchronize(){const progressId=mx.ui.showProgress(void 0,!0);try{await methodToPromise(mx.data,"synchronizeOffline",{})}finally{mx.ui.hideProgress(progressId)}}function executeAction(action,clientConfig,parameters,callback,error){function handleError(e){error?error(e):e instanceof ValidationError||mx.onError(e)}mx.session.hasSomeRole(action.config.allowedRoles)?async function(){switch(action.type){case"callMicroflow":return async function(modelerConfig,clientConfig,parameters){const confirmation=modelerConfig.confirmation;if(confirmation){if(!await new Promise(resolve=>mx.ui.confirmation({cancel:confirmation.cancel,proceed:confirmation.proceed,content:confirmation.question,handler:()=>resolve(!0),onCancel:()=>resolve(!1)})))return}if(clientConfig.beforeExecuteAction&&clientConfig.beforeExecuteAction(),clientConfig.abortOnClientValidations)switch(modelerConfig.validate){case"node":if(!clientConfig.widgetIsValid)throw new ValidationError;break;case"view":await clientConfig.currentForm.triggerValidation()}const progressId=modelerConfig.progress?mx.ui.showProgress(modelerConfig.progress.message,modelerConfig.progress.modal):void 0;try{await methodToPromise(clientConfig.currentForm,"publish","submit");const validationGuids=clientConfig.abortOnServerValidations?clientConfig.currentForm.getSubmitObjects().map(mxobj=>mxobj.getGuid()):[];await mx.onlineData.executeMicroflow(modelerConfig.name,toMicroflowParameters(parameters),clientConfig.currentForm,validationGuids,Boolean(modelerConfig.async))}finally{void 0!==progressId&&mx.ui.hideProgress(progressId)}}(action.config,clientConfig,parameters);case"callNanoflow":return async function(modelerConfig,clientConfig,parameters){clientConfig.beforeExecuteAction&&clientConfig.beforeExecuteAction(),clientConfig.abortOnClientValidations&&await clientConfig.currentForm.triggerValidation(),await methodToPromise(clientConfig.currentForm,"publish","submit"),await nanoflowEngine.execute(modelerConfig.nanoflow,toNanoflowArguments(parameters),clientConfig.currentForm)}(action.config,clientConfig,parameters);case"cancelChanges":return async function(config,{currentForm:currentForm}){currentForm.setSuspend(!0);try{await methodToPromise(currentForm,"publish","rollback"),await async function(mxobjs){return new Promise((resolve,reject)=>{mx.data.rollback({mxobjs:mxobjs,callback:resolve,error:reject})})}(currentForm.getSubmitObjects()),config.closePage&&await methodToPromise(currentForm,"close")}finally{currentForm.setSuspend(!1)}}(action.config,clientConfig);case"closePage":return async function(modelerConfig,{currentForm:currentForm}){return currentForm.closeMultiple(modelerConfig.numberOfPages)}(action.config,clientConfig);case"doNothing":return;case"openLink":const linkParameter="$object"in parameters&&parameters.$object?"object"in parameters.$object?parameters.$object.object:crash():void 0;return openLink(action.config,linkParameter);case"openPage":return openPage(action.config,clientConfig,parameters.$pageParameter).then(()=>{});case"saveChanges":return async function(config,{currentForm:currentForm}){await currentForm.triggerValidation(),currentForm.setSuspend(!0);try{await methodToPromise(currentForm,"publish","submit"),await methodToPromise(currentForm,"publish","commit"),await async function(mxobjs){return new Promise((resolve,reject)=>{mx.data.commit({mxobjs:mxobjs,callback:resolve,error:reject})})}(currentForm.getSubmitObjects());let closePage=config.closePage;try{config.syncAutomatically&&await synchronize()}catch(e){throw e instanceof DanglingError&&(closePage=!1),e}finally{closePage&&await methodToPromise(currentForm,"close")}}finally{currentForm.setSuspend(!1)}}(action.config,clientConfig);case"signOut":return async function(){mx.session.isGuest()||(mx.ui.showProgress(void 0,!0),mx.logout())}();case"synchronize":return synchronize();case"deleteObject":return async function(config,{currentForm:currentForm},parameter){let objects;if(parameter)if("object"in parameter)objects=[parameter.object];else{if(!("objects"in parameter))throw new AssertionError;objects=parameter.objects}else objects=[];const confirmation=translate(objects.length>1?"mxui.widget.DataGrid":"mxui.sys.UI","confirm_delete",objects.length.toString());if(await new Promise(resolve=>mx.ui.confirmation({content:confirmation,handler:()=>{resolve(!0)},onCancel:()=>{resolve(!1)}}))){currentForm.setSuspend(!0);try{await mx.onlineData.delete(objects),config.closePage&&await methodToPromise(currentForm,"close")}finally{currentForm.setSuspend(!1)}}}(action.config,clientConfig,parameters.$object);case"createObject":const parameter="$object"in parameters&&parameters.$object?"object"in parameters.$object?parameters.$object.object:crash():void 0;return async function(modelerConfig,clientConfig,parameter){if("association"in modelerConfig&&void 0===parameter)throw new AssertionError;const pid=mx.ui.showProgress("",!1);try{const mxObject=await new Promise((resolve,reject)=>mx.data.create({entity:modelerConfig.entity,callback:resolve,error:reject}));modelerConfig.association&&mxObject.addReference(modelerConfig.association,parameter.getGuid()),await openPage(modelerConfig.pageSettings,clientConfig,{object:mxObject})}finally{mx.ui.hideProgress(pid)}}(action.config,clientConfig,parameter);default:throw new AssertionError}}().then(callback,handleError):mx.session.isGuest()?mx.ui.showLogin():handleError(new DescribedError("Unable to execute action because you do not have sufficient permissions."))}export{executeAction as e};
