import{u as unavailable,f as available}from"./2252f97c.js";import"react";import{r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import"./e4677d80.js";import"./275ae0e7.js";import"./449717b5.js";import"./dc685e13.js";import"./194b06f4.js";import"./006f2130.js";import"./dd6506a6.js";import{g as getClientPagedList$}from"./e3382b49.js";import{g as getMicroflowArguments$}from"./5f469b1e.js";const MicroflowObjectListProperty=asProperty((config,store,widgetId)=>getClientPagedList$(config,store,widgetId,getMicroflowArguments$(config.argMap,store,"data source of "+widgetId),(async function(args){if("available"!==args.status)return args;let result;!function(args){mx.logger.debug(`Fetching data using microflow '${config.microflow}' for widget ${toFriendlyId(widgetId)}`,"parameter mapping:",args)}(args.value);try{result=await mx.onlineData.retrieveByMicroflow(config.microflow,config.queryId,args.value)}catch(e){return function(widgetId,e){mx.onError(new Error(`An error occurred while executing microflow data source for widget ${toFriendlyId(widgetId)}: ${e.message}`))}(widgetId,e),unavailable()}return function({objects:objects,extra:extra}){mx.logger.debug(`Received ${objects.length} objects and ${extra.length} objects over schema for widget ${toFriendlyId(widgetId)}`,"object ids:",objects.map(o=>o.getGuid()),"extra ids:",extra.map(o=>o.getGuid()))}(result),available(result.objects)})));export{MicroflowObjectListProperty};
