import{m as loading,u as unavailable,f as available}from"./2252f97c.js";import"react";import{r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import"./e4677d80.js";import"./275ae0e7.js";import"./449717b5.js";import"./dc685e13.js";import"./194b06f4.js";import"./006f2130.js";import"./dd6506a6.js";import{g as getClientPagedList$}from"./e3382b49.js";const AssociationObjectListProperty=asProperty((config,store,widgetId)=>{const friendlyId=toFriendlyId(widgetId);return getClientPagedList$(config,store,widgetId,store.useSlot(config.scope,"object")[0],(async function(context){if(void 0===context||"available"!==context.status)return mx.logger.debug(`Clearing data for widget ${friendlyId} because there is no source object`),loading();const contextGuid=context.value.getGuid();let result;!function(contextGuid){mx.logger.debug(`Fetching data with context '${contextGuid}' and queryId '${config.queryId}' for widget ${friendlyId}`)}(contextGuid);try{result=await mx.onlineData.retrieveByPath(contextGuid,config.queryId)}catch(e){return function(widgetId,e){mx.onError(new Error(`An error occurred while executing association data source for widget ${toFriendlyId(widgetId)}: ${e.message}`))}(widgetId,e),unavailable()}return function({mxobjects:mxobjects,extra:extra}){mx.logger.debug(`Received ${mxobjects.length} objects and ${extra.length} objects over schema for widget ${friendlyId}`,"object ids:",mxobjects.map(o=>o.getGuid()),"extra ids:",extra.map(o=>o.getGuid()))}(result),available(result.mxobjects)}))});export{AssociationObjectListProperty};
