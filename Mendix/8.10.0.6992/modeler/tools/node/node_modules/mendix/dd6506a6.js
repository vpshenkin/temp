import{O as withSideEffect$,L as asReloadable$,P as fromMxSubscription$,Q as fromTimer$,v as fromConstant$,R as getPreviousValue$,k as fromComputation$,M as fromMutableComputation$,S as scheduleSideEffect,C as readUntracked,G as scheduleAction}from"./2252f97c.js";import{e as ensure}from"./e81b9882.js";import{Big}from"big.js";import{y as assertIsPositiveInteger}from"./e4677d80.js";import{d as deepEqual}from"./275ae0e7.js";import{g as getShouldLoad$}from"./006f2130.js";function objectListTrigger(config,store,widgetId,parameters$){const entityUpdate$=fromMxSubscription$("Entity subscription of data source of "+widgetId,{entity:config.entity}),refresh$=config.refreshTime?fromTimer$("Refresh of data source of "+widgetId,config.refreshTime):fromConstant$(void 0),shouldLoad$=getShouldLoad$(config.scope,store,widgetId),previousParameters$=getPreviousValue$(parameters$);let fetchId=-1;const fetchTrigger$=fromComputation$("Load trigger of data source of "+widgetId,()=>(entityUpdate$.dependOn(),refresh$.dependOn(),shouldLoad$.dependOn()?{load:!0,parameters:parameters$.dependOn(),id:++fetchId}:{load:!1})),[limit$]=store.useSlot(widgetId,"limit"),[offset$,setOffset]=store.useSlot(widgetId,"offset"),page$=fromMutableComputation$("Page info of data source of "+widgetId,()=>{var _a;const limit=limit$.dependOn();let offset=offset$.dependOn();const previousParameter=previousParameters$.dependOn();return void 0===previousParameter||deepEqual(parameters$.dependOn(),previousParameter)||(offset=new Big(0),scheduleSideEffect(()=>silentlyResetOffset)),{offset:void 0!==offset?Number(offset):0,limit:void 0!==limit?Number(limit):null!==(_a=config.defaultLimit)&&void 0!==_a?_a:Number.POSITIVE_INFINITY}}),silentlyResetOffset=()=>page$.muted(()=>setOffset(Big(0)));return{fetchTrigger$:fetchTrigger$,page$:page$,silentlyResetOffset:silentlyResetOffset}}function withPageInfoSharing$(listValue$,store,widgetId){const[firstLoadDone$,setFirstLoadDone]=store.useSlot(widgetId,"firstLoadDone"),[,setTotal]=store.useSlot(widgetId,"total"),[,setHasMoreItems]=store.useSlot(widgetId,"hasMoreItems"),[,setPageGuids]=store.useSlot(widgetId,"pageGuids"),[,setCount]=store.useSlot(widgetId,"count");return withSideEffect$("Share page info of "+widgetId,listValue$,listValue=>{readUntracked(firstLoadDone$)||setFirstLoadDone("loading"!==listValue.status),"available"===listValue.status&&(setTotal(void 0!==listValue.totalCount?new Big(listValue.totalCount):void 0),setHasMoreItems(ensure(listValue.hasMoreItems)),setPageGuids(ensure(listValue.items).map(i=>i.id)),setCount(new Big(ensure(listValue.items).length)))},()=>{setFirstLoadDone(!1),setTotal(void 0),setHasMoreItems(void 0),setPageGuids(void 0),setCount(void 0)})}function getImmediatePageSetters(store,widgetId){return{setOffset:offset=>{assertIsPositiveInteger(offset),store.set(widgetId,"offset",new Big(offset))},setLimit:limit=>{void 0!==limit&&assertIsPositiveInteger(limit),store.set(widgetId,"limit",void 0!==limit?new Big(limit):void 0)}}}function getDelayedPageSetters(store,widgetId){return{setOffset:offset=>{assertIsPositiveInteger(offset),scheduleAction(()=>store.set(widgetId,"offset",new Big(offset)))},setLimit:limit=>{void 0!==limit&&assertIsPositiveInteger(limit),scheduleAction(()=>store.set(widgetId,"limit",void 0!==limit?new Big(limit):void 0))}}}function asReloadableListValue$(value$){return asReloadable$(value$)}export{asReloadableListValue$ as a,getImmediatePageSetters as b,getDelayedPageSetters as g,objectListTrigger as o,withPageInfoSharing$ as w};
