import{k as fromComputation$,f as available,h as getOrElseL,m as loading,D as getOrCrashL,w as mapL}from"./2252f97c.js";import{A as AssertionError,h as tuple}from"./e81b9882.js";import{c as getSubscribedObjectState$}from"./194b06f4.js";function getNanoflowArguments$(argMap,store,description){const parametersValues$=Object.entries(argMap).map(([name,{source:source,widget:widget}])=>{if("object"!==source)throw new AssertionError;return{name:name,value$:getSubscribedObjectState$(store,widget)}});return fromComputation$("Parameters of "+description,()=>{const values=parametersValues$.map(({name:name,value$:value$})=>({name:name,value:value$.dependOn()}));return values.every(({value:value})=>"loading"!==value.status)?available(values.map(({name:name,value:value})=>({name:name,value:getOrElseL(value,void 0)}))):loading()})}function getMicroflowArguments$(argMap,store,description){const parametersValues$=Object.entries(argMap).map(([name,param])=>({name:name,value$:toMicroflowArgument$(name,param)}));return fromComputation$("Parameters of "+description,()=>{const values=parametersValues$.map(({name:name,value$:value$})=>({name:name,value:value$.dependOn()}));return values.every(({value:value})=>"loading"!==value.status)?available(Object.fromEntries(values.filter(({value:value})=>"available"===value.status).map(({name:name,value:value})=>tuple(name,getOrCrashL(value))))):loading()});function toMicroflowArgument$(name,param){const descr=`Value of ${name} parameter of ${description}`;switch(param.source){case"allpages":const[allGuids$]=store.useSlot(param.widget,"allGuids");return fromComputation$(descr,()=>{const allGuids=allGuids$.dependOn();return void 0!==allGuids?available({guids:allGuids}):loading()});case"selection":const[selection$]=store.useSlot(param.widget,"selection");return fromComputation$(descr,()=>{const selection=selection$.dependOn();return available({guids:null!=selection?selection:[]})});default:const state$=getSubscribedObjectState$(store,param.widget);return fromComputation$(descr,()=>mapL(state$.dependOn(),obj=>({guid:obj.getGuid()})))}}}export{getNanoflowArguments$ as a,getMicroflowArguments$ as g};
