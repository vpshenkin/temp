import{k as fromComputation$,x as flatMapL,l as dependOnSubscription,f as available,u as unavailable,m as loading,K as fromRequest$,w as mapL}from"./2252f97c.js";import{k as clientToAttributeValue}from"./e4677d80.js";import{n as notAccessible,a as accessible,A as Access}from"./449717b5.js";function getSubscribedObjectState$(store,widgetId){const[state$]=store.useSlot(widgetId,"object");return getSubscribedObject$(widgetId,state$)}function getSubscribedObject$(widgetId,state$){return fromComputation$("Object of "+widgetId,()=>{var _a;return flatMapL(null!==(_a=state$.dependOn())&&void 0!==_a?_a:loading(),stateObj=>(dependOnSubscription({guid:stateObj.getGuid(),tag:widgetId}),stateObj.isUnavailable()?unavailable():available(stateObj)))})}function withObjectKeeping$(tag,value$,getGuids){return fromComputation$("Subscribe to objects of "+tag,()=>{const value=value$.dependOn();return"available"===value.status&&getGuids(value.value).forEach(guid=>dependOnSubscription({tag:tag,guid:guid})),value})}function getByPath$(rootObject$,path,onlyFromCache=!1){const pathSteps=path.split("/");let objectSoFar$=rootObject$;for(;pathSteps.length>0;){const[association,entity]=pathSteps.splice(0,2),previousObject$=objectSoFar$,fetchResult$=fromRequest$(`Fetch ${association} of ${path}`,()=>{const previousObject=previousObject$.dependOn();if("available"!==previousObject.status||"cacheMiss"===previousObject.value)return previousObject;dependOnSubscription({guid:previousObject.value.getGuid()}),dependOnSubscription({guid:previousObject.value.getGuid(),attr:association});const reference=clientToAttributeValue(previousObject.value.get(association),"ObjectReference");if(!reference)return unavailable();const cachedObject=mx.data.getCachedObject(reference);return cachedObject?available(cachedObject):onlyFromCache?available("cacheMiss"):new Promise((resolve,reject)=>mx.data.get({guid:reference,callback:mxobj=>resolve(mxobj?available(mxobj):unavailable()),error:reject}))});objectSoFar$=fromComputation$(`Cast fetch result of ${association} in ${path}`,()=>{const fetchResult=fetchResult$.dependOn();return"available"!==fetchResult.status||"cacheMiss"===fetchResult.value?fetchResult:(dependOnSubscription({guid:fetchResult.value.getGuid()}),fetchResult.value.isUnavailable()||!mx.meta.getEntity(fetchResult.value.getEntity()).isA(entity)?unavailable():fetchResult)})}return objectSoFar$}function getAttribute$(object$,attribute){return fromComputation$("Value of "+attribute,()=>mapL(object$.dependOn(),object=>(dependOnSubscription({guid:object.getGuid()}),dependOnSubscription({guid:object.getGuid(),attr:attribute}),object.has(attribute)?accessible(clientToAttributeValue(object.get(attribute),object.getAttributeType(attribute)),object.isReadonlyAttr(attribute)?Access.Read:Access.Write):notAccessible())))}export{getAttribute$ as a,getSubscribedObject$ as b,getSubscribedObjectState$ as c,getByPath$ as g,withObjectKeeping$ as w};
