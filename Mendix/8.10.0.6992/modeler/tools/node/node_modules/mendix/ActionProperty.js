import{B as useValue,k as fromComputation$,b as action,C as readUntracked,D as getOrCrashL}from"./2252f97c.js";import"react";import{m as mapValues,e as ensure,r as toFriendlyId}from"./e81b9882.js";import{c as asProperty}from"./0ad2390d.js";import{p as pageScope}from"./0b2c9cb2.js";import"./3cf8690e.js";import"./0e7164f2.js";import"big.js";import{t as translate}from"./11de92d0.js";import{a as DescribedError}from"./e4677d80.js";import"./c40e70cb.js";import{b as getActionParameters$,V as ValidationError}from"./dbc0cbf9.js";import"./d1a3b52a.js";import"./275ae0e7.js";import"./449717b5.js";import"./61ebc708.js";import{e as executeAction}from"./41e43d54.js";const ActionProperty=asProperty((config,store,widgetId)=>computeAction(config,store,widgetId));function computeAction(config,store,widgetId,predefinedArguments){const[actionsInProgress$,setActionsInProgress]=useValue("Actions in progress for "+widgetId,0),isExecuting$=fromComputation$("Action is executing for "+widgetId,()=>actionsInProgress$.dependOn()>0),[isInvalid$]=store.useSlot(widgetId,"isInvalid"),[currentForm$]=store.useSlot(pageScope,"form"),allowed=mx.session.hasSomeRole(config.action.config.allowedRoles)||mx.session.isGuest(),actionParameters$=getActionParameters$(config.action.argMap,store,predefinedArguments),canExecute$=fromComputation$(`Action for ${widgetId} can execute`,()=>allowed&&Object.values(actionParameters$.dependOn()).every(p=>"available"===p.status));return fromComputation$("Action value for "+widgetId,()=>({canExecute:canExecute$.dependOn(),isExecuting:isExecuting$.dependOn(),execute:action(execute)}));function execute(){if(!readUntracked(canExecute$))return void mx.logger.debug(`Widget is attempting to execute a ${config.action.type} action which is not executable.`);const parameters=mapValues(readUntracked(actionParameters$),getOrCrashL);if(Object.keys(parameters).some(arg=>{const parameter=parameters[arg];return"selection"===config.action.argMap[arg].source&&void 0!==parameter&&"objects"in parameter&&0===parameter.objects.length}))return void mx.ui.showMessage("info",translate("mxui.widget.DataGrid","no_selection"),!1);const isInvalid=readUntracked(isInvalid$),currentForm=ensure(readUntracked(currentForm$))[0];setActionsInProgress(readUntracked(actionsInProgress$)+1),executeAction(config.action,{abortOnClientValidations:!0,abortOnServerValidations:config.abortOnServerValidation,widgetIsValid:!isInvalid,currentForm:currentForm},parameters,action(()=>{setActionsInProgress(readUntracked(actionsInProgress$)-1)}),action(e=>{setActionsInProgress(readUntracked(actionsInProgress$)-1),e instanceof DescribedError?mx.onError(e):e instanceof ValidationError||mx.onError(new Error(`An error occurred while executing an action of ${toFriendlyId(widgetId)}: ${e.message}`))}))}}export{ActionProperty,computeAction};
