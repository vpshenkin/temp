import{View,Animated}from"react-native";import{Component,createElement}from"react";import{_ as __rest}from"./d46da013.js";import{e as extract}from"./b98b1f86.js";import{TabView,TabBar}from"react-native-tab-view";class TabContainer extends Component{constructor(){super(...arguments),this.state={index:TabContainer.getDefaultPageIndex(this.props.pages)},this.renderSceneHandler=this.renderScene.bind(this),this.renderTabBarHandler=this.renderTabBar.bind(this),this.renderLabelHandler=this.renderLabel.bind(this),this.onIndexChangeHandler=this.onIndexChange.bind(this)}render(){this.style=function([style]){const{tabBar:tabBarStyle}=style,other=__rest(style,["tabBar"]),[{tabBarPosition:tabBarPosition,scrollEnabled:scrollEnabled,bounces:bounces,pressColor:pressColor,pressOpacity:pressOpacity},tabBar]=extract(tabBarStyle,["tabBarPosition","scrollEnabled","bounces","pressColor","pressOpacity"]),containerProps={tabBarPosition:tabBarPosition},tabBarProps={scrollEnabled:scrollEnabled,bounces:bounces,pressColor:pressColor,pressOpacity:pressOpacity};return Object.assign({containerProps:containerProps,tabBarProps:tabBarProps,tabBar:tabBar},other)}(this.props.style);const visibleRoutes=this.getVisibleRoutes(this.props.pages);return visibleRoutes.length>0?createElement(TabView,Object.assign({navigationState:{index:this.state.index,routes:visibleRoutes},renderScene:this.renderSceneHandler,renderTabBar:this.renderTabBarHandler,onIndexChange:this.onIndexChangeHandler,style:this.style.container},this.style.containerProps)):null}renderScene({route:route}){const{page:page,name:name}=TabContainer.getFilteredPages(this.props.pages)[parseInt(route.key,10)];return createElement(View,{style:{flex:1},testID:`${this.props.name}$${name}$sceneView`},page)}renderLabel({route:route}){const isActive=parseInt(route.key,10)===this.state.index;return createElement(Animated.Text,{style:isActive?this.style.activeLabel:this.style.label},route.title)}renderTabBar(props){return createElement(TabBar,Object.assign({},props,{tabStyle:this.style.tab,indicatorStyle:this.style.indicator,renderLabel:this.renderLabelHandler,style:this.style.tabBar},this.style.tabBarProps))}onIndexChange(index){this.setState({index:index})}getVisibleRoutes(pages){return TabContainer.getFilteredPages(pages).map((page,index)=>({key:index.toString(),title:page.caption.value,testID:`${this.props.name}$${page.name}`}))}static getDefaultPageIndex(pages){const defaultPageIndex=TabContainer.getFilteredPages(pages).findIndex(page=>page.isDefault);return-1===defaultPageIndex?0:defaultPageIndex}static getFilteredPages(pages){return pages.filter(page=>!page.isVisible||page.isVisible.value)}}export{TabContainer};
