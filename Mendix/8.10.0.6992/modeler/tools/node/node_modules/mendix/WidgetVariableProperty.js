import{c as computed,o as observable,M as fromMutableComputation$,I as valueMonitor,b as action}from"./2252f97c.js";import"react";import"./e81b9882.js";import{e as asMobxProperty}from"./0ad2390d.js";import"./3cf8690e.js";import"./0e7164f2.js";import{Big}from"big.js";import{t as translate}from"./11de92d0.js";import{x as assertIsNonEnumValue}from"./e4677d80.js";import"./d1a3b52a.js";import"./09e8fbb9.js";import{a as createNonEnumFormatter}from"./6e590920.js";const WidgetVariableProperty=asMobxProperty(({slot:slot,type:type,initialValue:initialValue},store,widgetId)=>{void 0===store.get$(widgetId,slot)&&void 0!==initialValue&&store.set(widgetId,slot,"number"==typeof initialValue?new Big(initialValue):initialValue);const defaultFormatter=createNonEnumFormatter(type,{}),submittedValue=computed(()=>store.get$(widgetId,slot)),unsubmittedValueBox=observable.box(void 0,{deep:!1}),formatter=observable.box(defaultFormatter,{deep:!1});let validator;const unsubmittedValue=fromMutableComputation$("Unsubmitted value for widget variable",()=>unsubmittedValueBox.get()),submittedValueMonitor=valueMonitor(()=>submittedValue.get());return()=>{submittedValueMonitor.runIfChanged(()=>unsubmittedValue.muted(()=>unsubmittedValueBox.set(void 0)));const submitted=submittedValue.get(),unsubmitted=unsubmittedValue.dependOn(),value=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?void 0:void 0!==unsubmitted?unsubmitted.value:submitted,displayValue=void 0!==unsubmitted&&"unparsed"===unsubmitted.state?unsubmitted.value:formatter.get().format(void 0!==unsubmitted?unsubmitted.value:submitted);return{status:"available",validation:void 0!==unsubmitted?unsubmitted.message:void 0,universe:void 0,readOnly:!1,formatter:formatter.get(),value:value,displayValue:displayValue,setValidator:v=>validator=v,setFormatter:action(f=>formatter.set(null!=f?f:defaultFormatter)),setTextValue:action(v=>function(value){const parseResult=formatter.get().parse(value);parseResult.valid?setValue(parseResult.value):unsubmittedValueBox.set({state:"unparsed",value:value,message:getInvalidMessage(type)})}(v)),setValue:action(v=>setValue(v))}};function setValue(value){assertIsNonEnumValue(value,type);const validation=void 0!==validator?validator(value):void 0;void 0!==validation?unsubmittedValueBox.set({state:"parsed",value:value,message:validation}):store.set(widgetId,slot,value)}});function getInvalidMessage(attributeType){switch(attributeType){case"String":case"Boolean":case"ObjectReferenceSet":return translate("mendix.lib.Validations","invalid_value");case"Decimal":return translate("mendix.lib.Validations","invalid_number")}}export{WidgetVariableProperty};
